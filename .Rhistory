install.packages("igraph")
library(igraph)
install.packages("igraphdata")
install.packages("igraph")
library("igraph", lib.loc="~/R/R-3.3.1/library")
library("igraph", lib.loc="~/R/R-3.3.1/library")
library("igraphdata", lib.loc="~/R/R-3.3.1/library")
elist.lazega
library(sand)
install.packages("sand")
library(sand)
elist.lazega
head(elist.lazega)
head(v.attr.lazega)
install.packages("ndtv")
library("ndtv", lib.loc="~/R/R-3.3.1/library")
detach("package:network", unload=TRUE)
library("network", lib.loc="~/R/R-3.3.1/library")
detach("package:networkDynamic", unload=TRUE)
library("networkDynamic", lib.loc="~/R/R-3.3.1/library")
detach("package:animation", unload=TRUE)
library("animation", lib.loc="~/R/R-3.3.1/library")
detach("package:sna", unload=TRUE)
library("sna", lib.loc="~/R/R-3.3.1/library")
detach("package:statnet.common", unload=TRUE)
library("statnet.common", lib.loc="~/R/R-3.3.1/library")
detach("package:ndtv", unload=TRUE)
library("ndtv", lib.loc="~/R/R-3.3.1/library")
plot(wheel)
library("ndtv", lib.loc="~/R/R-3.3.1/library")
wheel <- network.initialize(10)
add.edges.active(wheel,tail=1:9,head=c(2:9,1),onset=1:9, terminus=11)
add.edges.active(wheel,tail=10,head=c(1:9),onset=10, terminus=12)
plot(wheel)
render.animation(wheel) # compute and render
ani.replay() # play back in plot window
V(wheel)
list.network.attributes(wheel)
install.packages("tergm")
library("tergm", lib.loc="~/R/R-3.3.1/library")
data("florentine") # an example network
plot(flobusiness,displaylabels=TRUE)
theta.diss <- log(9)
stergm.fit.1 <- stergm(flobusiness,
+ formation= ~edges+gwesp(0,fixed=TRUE),
+ dissolution = ~offset(edges),
+ targets="formation",
+ offset.coef.diss = theta.diss,
+ estimate = "EGMME" )
estimate = "EGMME" )
theta.diss <- log(9)
stergm.fit.1 <- stergm(flobusiness,
formation= ~edges+gwesp(0,fixed=TRUE),
dissolution = ~offset(edges),
targets="formation",
offset.coef.diss = theta.diss,
estimate = "EGMME" )
slice.par<-list(start=75,end=100,interval=1,
aggregate.dur=1,rule="latest")
compute.animation(stergm.sim.1,slice.par=slice.par,
animation.mode='MDSJ')
stergm.sim.1 <- simulate.stergm(stergm.fit.1,
nsim=1, time.slices = 100)
slice.par<-list(start=75,end=100,interval=1,
aggregate.dur=1,rule="latest")
compute.animation(stergm.sim.1,slice.par=slice.par,
animation.mode='MDSJ')
render.par=list(tween.frames=5,show.time=TRUE,
show.stats="~edges+gwesp(0,fixed=TRUE)")
render.animation(stergm.sim.1,render.par=render.par,
+ edge.col="darkgray",displaylabels=TRUE,
+ label.cex=.6,label.col="blue")
render.animation(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue")
ani.replay()
render.d3movie(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue",
filename=('stergm.sim1.html')
render.d3movie(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue",
filename='stergm.sim1.html')
render.d3movie(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue",
filename='stergm.sim1.html')
render.d3movie(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue",
output.mode = 'htmlWidget')
install.packages("htmlwidgets")
library("htmlwidgets", lib.loc="~/R/R-3.3.1/library")
render.d3movie(stergm.sim.1,render.par=render.par,
edge.col="darkgray",displaylabels=TRUE,
label.cex=.6,label.col="blue",
output.mode = 'htmlWidget')
library("igraph", lib.loc="~/R/R-3.3.1/library")
install.packages("RefManageR")
library("RefManageR", lib.loc="~/R/R-3.3.1/library")
install.packages("bibtex")
install.packages("C:/Users/Sebastian/Downloads/bibtex_0.4.0.tar.gz", repos = NULL, type = "source")
library("igraph", lib.loc="~/R/R-3.3.1/library")
library("igraph", lib.loc="~/R/R-3.3.1/library")
library("igraph", lib.loc="~/R/R-3.3.1/library")
install.packages("bibtex")
library("bibtex", lib.loc="~/R/R-3.3.1/library")
library("RefManageR", lib.loc="~/R/R-3.3.1/library")
install.packages("bibtex")
install.packages("bib2df")
library("bib2df", lib.loc="~/R/R-3.3.1/library")
install.packages("shiny")
library("shiny", lib.loc="~/R/R-3.3.1/library")
runApp("01_hello")
runExample("01_hello")
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/R-3.3.1/library")
install.packages("BDI")
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',
host = 'localhost')
install.packages("C:/Users/Sebastian/Downloads/DBI_0.5-1.zip", repos = NULL, type = "win.binary")
library("BDI")
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',
host = 'localhost')
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',
)
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',
host = 'localhost')
install.packages("sqldf")
install.packages("XLConnect")
library("sqldf", lib.loc="~/R/R-3.3.1/library")
library("XLConnect", lib.loc="~/R/R-3.3.1/library")
getwd()
library("stringr", lib.loc="~/R/R-3.3.1/library")
relations = relations[relations[,1]!=relations[,2], ]
# Libraries
library("networkD3")
library('randomNames')
library("igraph")
# Create data with the randomNames package :
NUMOFLINKS = 100
relations = data.frame(source = randomNames(1000,which.names='both'), target = "")
relations = relations[rep(seq_len(nrow(relations)), sample(1:10,nrow(relations), replace=T)),]
relations = relations[sample(nrow(relations),NUMOFLINKS),]
relations$target = sample(relations$source,nrow(relations), replace = T)
relations = relations[relations[,1]!=relations[,2], ]
vertices<-data.frame("name" = unique(unlist(relations))) # node names
g = graph.data.frame(relations, directed=F, vertices=vertices) # raw graph
vertices$group = edge.betweenness.community(g)$membership # betweeness centrality for each node for grouping
# create indices for each name to fit forceNetwork data format
relations$source.index = match(relations$source, vertices$name)-1
relations$target.index = match(relations$target, vertices$name)-1
# sophisticated network graph
d3 = forceNetwork(Links = relations, Nodes = vertices,
Source = "source.index", Target = "target.index",
NodeID = "name",
Group = "group", # color nodes by betweeness calculated earlier
charge = -70, # node repulsion
linkDistance = 25,
zoom = T)
show(d3)
#with my data
net <- read.graph("net_day_4.graphml", "graphml")
install.packages("rzmq", dependencies=TRUE, repos='http://cran.rstudio.com/')
library("compiler", lib.loc="~/R/R-3.3.1/library")
library("jsonlite", lib.loc="~/R/R-3.3.1/library")
relations$target.index = match(relations$target, vertices$name)-1
install.packages("sand")
library("sand", lib.loc="~/R/R-3.3.2/library")
C10
N
summary(hc)
View(hc)
plot(hc)
plot(hc$Time)
plot(hc$ID1)
str(hc)
nrow(unique(hc$Time))
length(unique(hc$Time))
length(unique(hc$ID1))
length(unique(hc$ID2))
N
N
View(ID.stack)
str(ID.stack)
dummy <- c(3,3)
View(dummy)
rm(dummy)
View(my.t)
library("sand", lib.loc="~/R/R-3.3.2/library")
C10
N
ID.stack <- c(hc$ID1, hc$ID2)
length(unique(hc$ID1))
length(unique(hc$ID2))
length(unique(ID.stack))
Status.stack <- c(as.character((hc$S1), as.character(hc$S2) ))
length(unique(Status.stack))
my.t <- table(ID.stack, Status.stack)
Status.stack <- c(as.character(hc$S1), as.character(hc$S2) )
length(unique(Status.stack))
my.t <- table(ID.stack, Status.stack)
View(my.t)
str(my.t)
dummy <- c(ID.stack, Status.stack)
dummy <- cbind(ID.stack, Status.stack)
head(dummy)
v.status <- character(nrow(my.t))
View(v.status)
str(v.status)
nrow(my.t)
length(v.status)
for (i in (1:length(v.status))){}
for (i:in (1:length(v.status))){
v.status[i] <- names(which(my.t[i,]!= 0))
}
for (i:in (1:length(v.status))){
v.status[i] <- names(which(my.t[i,]!= 0))
}
for (i:in (1:length(v.status))){
v.status[i] <- names(which(my.t[i,]!= 0))
}
for (i:in (1:length(v.status))) {
v.status[i] <- names(which(my.t[i,]!= 0))
}
for (i:in (1:length(v.status))) {
v.status[i] <- names(which(my.t[i,]!= 0))
}
for (i in (1:length(v.status))) {
v.status[i] <- names(which(my.t[i,]!= 0))
}
View(v.status)
v.statuss
v.status
table(v.status)
status.t <- table(hc$S1, hc$S2)
View(status.t)
t(status.t)
N
N
N
tm.es <- paste(hc$S1, "-", hc$S2, sep="")
View(tm.es)
tm.es
unique(tmp.es)
tmp.es <- paste(hc$S1, "-", hc$S2, sep="")
unique(tmp.es)
hc[[1]]
dim(hc[[1]])
dim(hc)[[1]])
dim(hc)[[1]]
dim(hc)[[2]]
dim(hc)[[3]]
dim(hc)[[1]]
nrow(hc)
e.status <- character(dim(hc)[[1]])
e.status
str(e.status)
e.status[tmp.es=="ADM-ADM"] <- "ADM-ADM"
e.status
e.status[tmp.es=="MED-MED"] <- "MED-MED"
e.status
e.status[tmp.es=="NUR-NUR"] <- "NUR-NUR"
e.status
e.status[tmp.es=="PAT-PAT"] <- "PAT-PAT"
e.status
library("sqldf")
library("combinat" )
db <- dbConnect(SQLite(), dbname="Forest_1.sqlite")
mydata <- read.csv("EM_WoS.csv")
setwd("C:/Users/Sebastian/Google Drive/DOCTORADO/PAPERS/F. OBJECTIVE 1 - Simulation ABM/D. MODEL 4 - Viviana/17. Forest_R/forest")
mydata <- read.csv("EM_WoS.csv")
mydata$X <- NULL
article <- mydata[,c(2, 1, 3,36, 43, 41  )]
author <- mydata[, c(2,7)]
View(author)
x <- c(
" x y ",           # spaces before, after and in between
" \u2190 \u2192 ", # contains unicode chars
paste0(            # varied whitespace
whitespace,
"x",
whitespace,
"y",
whitespace,
collapse = ""
),
NA                 # missing
)
whitespace <- " \t\n\r\v\f"
whitespace
x <- c(
" x y ",           # spaces before, after and in between
" \u2190 \u2192 ", # contains unicode chars
paste0(            # varied whitespace
whitespace,
"x",
whitespace,
"y",
whitespace,
collapse = ""
),
NA                 # missing
)
x
